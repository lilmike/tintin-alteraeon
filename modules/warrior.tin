#ACTION {^You are rescued from certain death by %1!}
{
    a
}
{1}

#ACTION {^You fail the rescue!}
{
    rescue $lastRescued
}
{1}

#ACTION {^You find yourself too weak to use %1.$}
{
    #variable {rewield} {true};
    eq | grep wielded | prefix silent_
}

#ACTION {^silent_wielded     - $}
{
    #unvariable {weapon}
}

#ACTION {^The physical reserve deep within you feels replenished.$}
{
    #nop {client variables are always temperary.};
    #unvariable {client[exhausted]};
    play reserve-replenish
}
{9}

#ACTION {^You discover a way to use %1 in combination!$}
{
    Channel_Event all %0;
    autobrag %0;
    play new-combo
}
{9}

#ACTION {^You don't have enough energy to do that again so soon.$}
{
    #send {assist}
}
{9}

#ACTION {^You got a %d attack combo%2}
{
    #unticker {comboFail};
    #delay {comboFail} {@do_hook{comboFail}} {5};
    play combo-partial-%1
}
{9}

#ACTION {^You successfully finished a full %d attack combo!}
{
    #unticker {comboFail};
    play combo-full-%1;
    @do_hook{comboFinish}
}
{9}

#ACTION {^You suddenly feel less tired and more refreshed!$}
{
    #nop {client variables are always temperary.};
    #variable {client[exhausted] {true}}
}
{9}

#ACTION {^You try to push beyond the boundries of your endurance, but nothing happens!$}
{
    #nop {client variables are always temperary.};
    #variable {client[exhausted]} {true}
}
{9}

#ACTION {^You {feel your enhanced courage fading|make a cut and paint yourself with your own blood, but don't feel any different}.$}
{
    #if {${character[currentHp]} > ${character[maxHp]} / 2}
    {
        @command{val;valor}
    };
    #if {{%1} == {feel your enhanced courage fading}}
    {
        play valor-drop
    }
}
{9}

#ACTION {^Your body is still too exhausted from last time.$}
{
    #nop {client variables are always temperary.};
    #variable {client[exhausted]} {true}
}
{9}

#ACTION {^silent_ Length %d \x7c %2}
{
    #variable {combo[attack]} {%2 |};
    #replace {combo[attack]} {\x7c} { ${combo[target]};};
    #replace {combo[attack]} {berserking} {berserk};
    #replace {combo[attack]} {bloodlet } {};
    #replace {combo[attack]} {crippling strike} {cripple};
    #replace {combo[attack]} {ground strike} {gstrike};
    #replace {combo[attack]} {leap attack} {leap};
    #replace {combo[attack]} {pommel strike} {pommel};
    #replace {combo[attack]} {dirt throwing} {dirt};
    #replace {combo[attack]} {shield slam} {slam};
    #nop #replace {combo[attack]} {x} {randomattack};
    #nop #local {tmp} {};
    #list {tmp} {create} {${combo[attack]}};
    #foreach {*{tmp[]}} {i}
    {
        #format {tmp[$i]} {%p} {${tmp[$i]}}
    };
    #nop #local {tmp2} {};
    #nop #local {i} {};
    #foreach {thrust;taunt;charge;lunge;bash;kick;riposte;pommel strike;jab;stomp;knockback;cleave} {i}
    {
        #variable {tmp2[$i]} {true}
    };
    #if {{${combo[type]}} == {{advanced|cross}}}
    {
        #foreach {leap attack;intimidate;disarm;berserking;whirlwind;ground strike;shield slam} {i}
        {
            #variable {tmp2[$i]} {true}
        }
    };
    #if {{${combo[type]}} == {cross}}
    {
        #foreach {backstab;trip;bloodletting stab;dirt throwing;shadow bind;shadow strike;knife throwing;feint;crippling strike;flourish} {i}
        {
            #variable {tmp2[$i]} {true}
        }
    };
    #if {{${tmp[1]}} != {x} || {${character[inBattle]}} == {true}}
    {
        #unvariable {tmp2[charge]};
        #if {{${combo[type]}} == {cross}}
        {
            #unvariable {tmp2[backstab]}
        }
    };
    #if {{${combo[type]}} == {{advanced|cross}}}
    {
        #list {tmp} {find} {disarm} {i};
        #if {$i > 0}
        {
            #unvariable {tmp2[disarm]}
        };
        #list {tmp} {find} {berserk} {i};
        #if {$i > 0 || !&{auto[berserk]} || {${auto[berserk]}} != {true}}
        {
            #unvariable {tmp2[berserking]}
        };
        #list {tmp} {find} {gstrike} {i};
        #if {$i > 0}
        {
            #unvariable {tmp2[shield slam]}
        };
        #list {tmp} {find} {slam} {i};
        #if {$i > 0}
        {
            #unvariable {tmp2[ground strike]}
        };
        #if {{${combo[target]}} == {}}
        {
            #unvariable {tmp2[intimidate]}
        }
    };
    #if {{${combo[type]}} == {cross}}
    {
        #list {tmp} {find} {gstrike} {i};
        #if {$i > 0}
        {
            #unvariable {tmp2[knife throwing]};
            #unvariable {tmp2[backstab]};
            #unvariable {tmp2[bloodletting stab]};
            #unvariable {tmp2[shadow strike]}
        };
        #list {tmp} {find} {shadow strike} {i};
        #if {$i > 0}
        {
            #unvariable {tmp2[ground strike]}
        };
        #list {tmp} {find} {knife throwing} {i};
        #if {$i > 0}
        {
            #unvariable {tmp2[ground strike]};
            #unvariable {tmp2[shield slam]}
        };
        #list {tmp} {find} {stab} {i};
        #if {$i > 0}
        {
            #unvariable {tmp2[ground strike]}
        };
        #list {tmp} {find} {backstab} {i};
        #if {$i > 0}
        {
            #unvariable {tmp2[ground strike]}
        }
    };
    #foreach {*{tmp2[]}} {i}
    {
        #if {!&{skillsAndSpells[$i]}}
        {
            #unvariable {tmp2[$i]}
        }
    };
    #nop #local {o} {};
    #list {tmp} {size} {o};
    #nop #local {tmp3} {};
    #list {tmp3} {create} {*{tmp2[]}};
    #nop #local {tmp5} {};
    #list {tmp3} {simplify};
    #variable {tmp5} {$tmp3};
    #replace {tmp5} {berserking} {berserk};
    #replace {tmp5} {bloodletting } {};
    #replace {tmp5} {crippling strike} {cripple};
    #replace {tmp5} {ground strike} {gstrike};
    #replace {tmp5} {leap attack} {leap};
    #replace {tmp5} {pommel strike} {pommel};
    #replace {tmp5} {dirt throwing} {dirt};
    #replace {tmp5} {shield slam} {slam};
    #list {tmp3} {create} {$tmp5};
    #foreach {*{tmp[]}} {i}
    {
        #list {tmp} {find} {disarm} {p};
        #if {$p > 0}
        {
            #list {tmp3} {find} {disarm} {p};
            #if {$p > 0}
            {
                #list {tmp3} {delete} {$p}
            }
        };
        #list {tmp} {find} {berserk} {p};
        #if {$p > 0}
        {
            #list {tmp3} {find} {berserk} {p};
            #if {$p > 0}
            {
                #list {tmp3} {delete} {$p}
            }
        };
        #list {tmp} {find} {slam} {p};
        #if {$p > 0}
        {
            #list {tmp3} {find} {gstrike} {p};
            #if {$p > 0}
            {
                #list {tmp3} {delete} {$p}
            }
        };
        #list {tmp} {find} {gstrike} {p};
        #if {$p > 0}
        {
            #list {tmp3} {find} {slam} {p};
            #if {$p > 0}
            {
                #list {tmp3} {delete} {$p}
            };
            #list {tmp3} {find} {stab} {p};
            #if {$p > 0}
            {
                #list {tmp3} {delete} {$p}
            };
            #list {tmp3} {find} {backstab} {p};
            #if {$p > 0}
            {
                #list {tmp3} {delete} {$p}
            };
            #list {tmp3} {find} {knife throwing} {p};
            #if {$p > 0}
            {
                #list {tmp3} {delete} {$p}
            }
        };
        #list {tmp} {find} {knife throwing} {p};
        #if {$p > 0}
        {
            #list {tmp3} {find} {gstrike} {p};
            #if {$p > 0}
            {
                #list {tmp3} {delete} {$p}
            }
        };
        #list {tmp} {find} {stab} {p};
        #if {$p > 0}
        {
            #list {tmp3} {find} {gstrike} {p};
            #if {$p > 0}
            {
                #list {tmp3} {delete} {$p}
            }
        };
        #list {tmp} {find} {backstab} {p};
        #if {$p > 0}
        {
            #list {tmp3} {find} {gstrike} {p};
            #if {$p > 0}
            {
                #list {tmp3} {delete} {$p}
            }
        };
        #if {{${tmp[$i]}} == {{?:\s*}x{?:\s*}{?:(?:${combo[target]})?}}}
        {
            #nop #local {tmp6} {${tmp3}};
            #variable {tmp6} {${tmp3}};
            #nop #local {tmp4} {};
            #while {1}
            {
                #nop #local {continue} {0};
                #variable {continue} {0};
                #nop #local {j} {};
                #nop #local {k} {};
                #nop #local {l} {};
                #list {tmp6} {size} {l};
                #if {$l == 0}
                {
                    #variable {tmp4} {randomattack ${combo[target]}};
                    #break
                };
                #else
                {
                    #math {k} {1 d $l};
                    #variable {tmp4} {${tmp6[$k]}}
                };
                #nop #local {m} {};
                #foreach {-2;-1;1;2} {m}
                {
                    #nop #local {n} {};
                    #math {n} {$i + $m};
                    #if {$n < 1 || $n > $o}
                    {
                        #continue
                    };
                    #if {{${tmp[$n]}} == {{?:\s*}$tmp4{?:\s*}${combo[target]}}}
                    {
                        #nop #local {p} {};
                        #list {tmp6} {find} {$tmp4} {p};
                        #if {$p > 0}
                        {
                            #list {tmp6} {delete} {$p}
                        };
                        #variable {continue} {1};
                        #break
                    }
                };
                #if {$continue}
                {
                    #continue
                };
                #else
                {
                    #break
                }
            };
            #variable {tmp[$i]} {$tmp4 ${combo[target]}}
        }
    };
    #list {tmp} {simplify};
    #variable {combo[attack]} {$tmp};
    #if {{${auto[weapon]}} == {true}}
    {
        #replace {combo[attack]} {knife throwing} {remove $weapon;throw shadow;wield $weapon}
    };
    #else
    {
        #replace {combo[attack]} {knife throwing} {throw shadow}
    };
    #if {{${combo[setKey]}} != {false}}
    {
        set${combo[setKey]} ${combo[attack]}
    };
    #else
    {
        ${combo[attack]}
    };
    #variable {combo[target]} {};
    #variable {combo[setKey]} {false};
    #foreach {j;k;l;m;n;o;p;;tmp2;tmp3;tmp4;tmp5;tmp6} {i}
    {
        #unvariable {$i}
    };
    #unvariable {i}
}
{9}

#ACTION {^{You give up waiting, and shift out of your riposte stance|Your riposte .*|.* notices your riposte and moves quickly to block it}{\.|!}$}
{
    #if {{${skillsAndSpells[riposte]}} == {true} && {${auto[riposte]}} == {true} && {${character[inBattle]}} == {true}}
    {
        riposte
    }
}
{9}


#ALIAS {^randomattack%s%2}
{
    get_random_attack;
    #list {randomAttack} {size} {i};
    #math {r} {1d$i};
    #if {$i >= 3}
    {
        #while {$r == ${lastRandomAttack[1]} || $r == ${lastRandomAttack[2]}}
        {
            #math {r} {1d$i}
        }
    };
    #variable {lastRandomAttack[2]} {${lastRandomAttack[1]}};
    #variable {lastRandomAttack[1]} {$r};
    ${randomAttack[$r]} %2
}

#ALIAS {{wi|wie|wiel|wield} %1}
{
    #if {{%1} != {$stabWeapon}}
    {
        #variable {weapon} {%1}
    };
    \wield %1
}

#ALIAS {^{3|4|5|6|7|8|}{|a|c|l}combo%*}
{
    #variable {combo[tmpvar]} {%3};
    #replace {combo[tmpvar]} {^ } {};
    #regexp {${combo[tmpvar]}} {{.+} {.+}}
    {
        #var {combo[target]} {&2};#var {combo[search]} {| grep &1}
    };
    #else
    {
        #if {{${combo[tmpvar]}} != {}}
        {
            #variable {combo[target]} {};
            #variable {combo[search]} {| grep ${combo[tmpvar]}}
        };
        #else
        {
            #variable {combo[target]} {};
            #variable {combo[search]} {}
        }
    };
    #if {{%1} != {}}
    {
        #variable {combo[length]} {| grep Length %1}
    };
    #else
    {
        #variable {combo[length]} {}
    };
    #switch {{%2}}
    {
        #case {{a}}
        {
            tactics advanced ${combo[length]} ${combo[search]} | grep -v x | prefix silent_ | head -n 1
        };
        #case {{c}}
        {
            tactics cross ${combo[length]} ${combo[search]} | grep -v x | prefix silent_ | head -n 1
        };
        #case {{l}}
        {
            tactics low ${combo[length]} ${combo[search]} | grep -v x | prefix silent_ | head -n 1
        };
        #default
        {
            tactics all ${combo[length]} ${combo[search]} | grep -v x | prefix silent_ | head -n 1
        }
    }
}
{8}

#ALIAS {^{3|4|5|6|7|8|}{|a|c|l}xcombo%*}
{
    #variable {combo[tmpvar]} {%3};
    #replace {combo[tmpvar]} {^ } {};
    #regexp {${combo[tmpvar]}} {{.+} {.+}}
    {
        #var {combo[target]} {&2};#var {combo[search]} {| grep &1}
    };
    #else
    {
        #if {{${combo[tmpvar]}} != {}}
        {
            #variable {combo[target]} {};
            #variable {combo[search]} {| grep ${combo[tmpvar]}}
        };
        #else
        {
            #variable {combo[target]} {};
            #variable {combo[search]} {}
        }
    };
    #if {{%1} != {}}
    {
        #variable {combo[length]} {| grep Length %1}
    };
    #else
    {
        #variable {combo[length]} {}
    };
    #switch {{%2}}
    {
        #case {{a}}
        {
            #variable {combo[type]} {advanced}
        };
        #case {{c}}
        {
            #variable {combo[type]} {cross}
        };
        #case {{l}}
        {
            #variable {combo[type]} {low}
        };
        #default
        {
            #variable {combo[type]} {all}
        }
    };
    tactics ${combo[type]} ${combo[length]} ${combo[search]} | grep x | prefix silent_ | head -n 1
}
{8}

#ALIAS {^get_random_attack$}
{
    #list {randomAttack} {clear};
    #if {{${skillsAndSpells[bash]}} == {true}}
    {
        #list {randomAttack} {add} {bash}
    };
    #if {{${skillsAndSpells[berserking]}} == {true} && {${auto[berserk]}} == {true} && {${character[inBattle]}} == {true}}
    {
        #if {${character[currentHp]} >= ${character[maxHp]} / 2 && ${character[currentMv]} >= ${character[maxMv]} / 2}
        {
            #list {randomAttack} {add} {berserk}
        }
    };
    #if {{${skillsAndSpells[bloodletting stab]}} == {true} && {${character[inBattle]}} == {true}}
    {
        #list {randomAttack} {add} {stab}
    };
    #if {{${skillsAndSpells[charge]}} == {true} && {${character[inBattle]}} != {true}}
    {
        #list {randomAttack} {add} {charge}
    };
    #if {{${skillsAndSpells[cleave]}} == {true}}
    {
        #list {randomAttack} {add} {cleave}
    };
    #if {{${skillsAndSpells[crippling strike]}} == {true}}
    {
        #list {randomAttack} {add} {cripple}
    };
    #if {{${skillsAndSpells[disarm]}} == {true} && {${auto[disarm]}} == {true}}
    {
        #list {randomAttack} {add} {disarm}
    };
    #if {{${skillsAndSpells[feint]}} == {true} && {${character[inBattle]}} == {true}}
    {
        #list {randomAttack} {add} {feint}
    };
    #if {{${skillsAndSpells[ground strike]}} == {true} && {${kxwt[terrain}} != {{7|18|19|20|21|23|25|29|31|32}}]}
    {
        #list {randomAttack} {add} {gstrike}
    };
    #if {{${skillsAndSpells[flourish]}} == {true}}
    {
        #list {randomAttack} {add} {flourish}
    };
    #if {{${skillsAndSpells[intimidate]}} == {true}}
    {
        #list {randomAttack} {add} {intimidate}
    };
    #if {{${skillsAndSpells[jab]}} == {true}}
    {
        #list {randomAttack} {add} {jab}
    };
    #if {{${skillsAndSpells[kick]}} == {true}}
    {
        #list {randomAttack} {add} {kick}
    };
    #if {{${skillsAndSpells[knife throwing]}} == {true}}
    {
        #list {randomAttack} {add} {throw shadow}
    };
    #if {{${skillsAndSpells[knockback]}} == {true}}
    {
        #list {randomAttack} {add} {knockback}
    };
    #if {{${skillsAndSpells[leap attack]}} == {true}}
    {
        #list {randomAttack} {add} {leap}
    };
    #if {{${skillsAndSpells[lunge]}} == {true}}
    {
        #list {randomAttack} {add} {lunge}
    };
    #if {{${skillsAndSpells[pommel strike]}} == {true}}
    {
        #list {randomAttack} {add} {pommel}
    };
    #if {{${skillsAndSpells[riposte]}} == {true} && {${character[inBattle]}} == {true}}
    {
        #list {randomAttack} {add} {riposte}
    };
    #if {{${skillsAndSpells[shadow bind]}} == {true}}
    {
        #list {randomAttack} {add} {shadow bind}
    };
    #if {{${skillsAndSpells[stomp]}} == {true}}
    {
        #list {randomAttack} {add} {stomp}
    };
    #if {{${skillsAndSpells[taunt]}} == {true}}
    {
        #list {randomAttack} {add} {taunt}
    };
    #if {{${skillsAndSpells[thrust]}} == {true}}
    {
        #list {randomAttack} {add} {thrust}
    };
    #if {{${skillsAndSpells[trip]}} == {true}}
    {
        #list {randomAttack} {add} {trip}
    };
    #if {{${skillsAndSpells[whirlwind]}} == {true}}
    {
        #list {randomAttack} {add} {whirlwind}
    };
    #list {randomAttack} {size} {i};
    #if {$i == 0}
    {
        #list {randomAttack} {add} {#echo {You do not currently have any warrior attacks. If you believe this is wrong, try the load command.}};
        #unvariable {lastRandomAttack}
    }
}
{9}

#ALIAS {^randomattack%s}
{
    get_random_attack;
    #list {randomAttack} {size} {i};
    #math {r} {1d$i};
    if {$i >= 3}{#while {$r == ${lastRandomAttack[1]} || $r == ${lastRandomAttack[2]}}{#math {r} {1d$i}}};
    #variable {lastRandomAttack[2]} {${lastRandomAttack[1]}};
    #variable {lastRandomAttack[1]} {$r};
    ${randomAttack[$r]}
}
{9}

#ALIAS {^re{s|sc|scu|scue} %s%3}
{
    #variable {lastRescued} {%3};
    #send {%0}
}
{9}

#ALIAS {^{3|4|5|6|7|8|}{combo|lcombo|acombo|ccombo}set{a|b|c|d|e|f|g|h|n|q|r|s|t|v|w|x|y|z|A|D|F|H|Q|W|E} %4}
{
    #variable {combo[setKey]} {%3};
    %1%2 %4
}
{9}

#ALIAS {^{auto|noauto}{berserk|charge|disarm|retreat|riposte|weapon|valor}$}
{
    #if {{%1} == {auto}}
    {
        #variable {auto[%2]} {true};
        #echo {auto %2 enabled.}
    };
    #else
    {
        #variable {auto[%2]} {false};
        #showme {auto %2 disabled.}
    }
}
{9}

#ALIAS {^{a|as|ass|assi|assis|assist}$}
{
    #if {{${skillsAndSpells[charge]}} == {true} && {${auto[charge]}} == {true} && ${character[currentMv]} > 20}
    {
        charge
    };
    #else
    {
        #send {assist}
    }
}
{9}




#VARIABLE {combo}
{
    {setKey} {false}
}
#VARIABLE {lastRandomAttack}
{
    {1} {0}
    {2} {0}
}
#VARIABLE {lastRescued} {}

