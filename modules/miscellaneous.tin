#ACTION {^silent_You have lost %1 experience points so far due to deaths.$}
{
	#variable {lostExp} {%1}
}
{1}

#ACTION {^%sYou have been playing a total of %d hours.}
{
	#line {gag};
	#variable {yearCounter} {0};
	#variable {monthCounter} {0};
	#variable {weekCounter} {0};
	#variable {dayCounter} {0};
	#variable {hourCounter} {%2};
	#while {$hourCounter > 8759}
	{
		#math {yearCounter} {$yearCounter + 1};
		#math {hourCounter} {$hourCounter - 8760}
	};
	#while {$hourCounter > 729}
	{
		#math {monthCounter} {$monthCounter + 1};
		#math {hourCounter} {$hourCounter - 730}
	};
	#while {$hourCounter > 167}
	{
		#math {weekCounter} {$weekCounter + 1};
		#math {hourCounter} {$hourCounter - 168}
	};
	#while {$hourCounter > 23}
	{
		#math {dayCounter} {$dayCounter + 1};
		#math {hourCounter} {$hourCounter - 24}
	};
	#variable {totalHoursMsg} {You have been playing approximately};
	#if {$yearCounter > 0}
	{
		#variable {totalHoursMsg} {$totalHoursMsg $yearCounter years,}
	};
	#if {$monthCounter > 0}
	{
		#variable {totalHoursMsg} {$totalHoursMsg $monthCounter months,}
	};
	#if {$weekCounter > 0}
	{
		#variable {totalHoursMsg} {$totalHoursMsg $weekCounter weeks,}
	};
	#if {$dayCounter > 0}
	{
		#variable {totalHoursMsg} {$totalHoursMsg $dayCounter days and}
	};
	#variable {totalHoursMsg} {$totalHoursMsg $hourCounter hours.};
	#echo {$totalHoursMsg}
}
{5}

#ACTION {^You are %1, and currently %2 tall.$}
{
	#variable {character.sex} {%1}
}
{5}

#ACTION {^silent_You insult {corpse carcass body|carcass gutted corpse} %S.$}
{
	#variable {corpseVnum} {%2};
	#send {get coins $corpseVnum | grep -v There's nothing left};
	#if {"${skillsAndSpells.corpsecutter}" == "true" && !&{inBattle}}
	{
		harvest components $corpseVnum | grep -v Looks like someone else beat you to it
	};
	#if {"${skillsAndSpells.harvest bone}" == "true" && !&{inBattle}}
	{
		harvest bone $corpseVnum | grep -v has no useful bones remaining
	};
	#if {"${skillsAndSpells.salvage equipment}" == "true" || &{battleScroll}}
	{
		search $corpseVnum | grep -v unique | prefix silent_ | grep -v There's nothing left
	};
	#if {"${skillsAndSpells.consume}" == "true"}
	{
		control all consume $corpseVnum | grep -v There's nothing left
	};
	#if {"${skillsAndSpells.blood sacrifice}" == "true"}
	{
		bsac $corpseVnum | grep -v no longer suitable
	};
	#if {"$busy" != "true"}
	{
		sac $corpseVnum
	};
	#unvariable {corpseVnum}
}
{9}

#ACTION {^silent_{Cleric|Druid|Mage|Necromancer} remaining: %2/%3}
{
	#if {%2 != %3}
	{
		#showme {You have %2 of %3 %1 control points remaining.}
	}
}
{5}

#ACTION {^silent_{Evil|Good}{Sun|Mon|Tue|Wed|Thu|Fri|Sat}%s{Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec}%s%d%s%d:%*}
{
	#showme {%1 offset:%9}
}
{8}

#ACTION {%1 {\(.*\(unique\)|\(unique\)}$}
{
	play unique;
	#if {"${auto.getunique}" == "true"}
	{
		#regexp {%1} {{.*} {.*}} {get &2 corpse;#if {"${auto.donateunique}" == "true"} {donate &2}};
		#else
		{
			get %1 corpse
		}
	}
}
{9}

#ACTION {^Press <return> or 'cont' to continue, anything else to quit...$}
{
	#history {insert} {#cr}
}
{9}

#ACTION {^Press return to continue...$}
{
	#history {insert} {#cr}
}
{9}

#ACTION {^Sleep while fighting?  Are you mad?$}
{
	#unvariable {position}
}
{9}

#ACTION {^Someone steps on you, and you awake to see warriors locked in mortal combat!$}
{
	#unvariable {position}
}
{9}

#ACTION {^Would you like to turn on low spam mode? (yes/no): $}
{
	#variable {yes}  {#send {yes}}
}
{9}

#ACTION {^You are awakened by %1.$}
{
	#unvariable {position}
}
{9}

#ACTION {^You can't sleep here, there's a battle going on!$}
{
	#unvariable {position}
}
{9}

#ACTION {^You now have %d combat poin{t|ts} you can spend.$}
{
	#if {&{autocp} && %1 >= ${autocp[2]}}
	{
		points buy ${autocp[1]}
	};
	autobrag combat point!
}
{9}

#ACTION {^You receive %d gambling gold!$}
{
	#if {!&{auto.gamble}}
	{
		#variable {auto.gamble} {false}
	};
	#if {"${auto.gamble}" == "false"}
	{
		#line {gag};
		#echo {%0 (You can automatically spend gambling gold by typing autogamble gametype where gametype is merchant or slots.)}
	};
	#else
	{
		gamble ${auto.gamble} %1;
		Add_Event You spent %1 gambling gold.
	}
}
{9}

#ACTION {^You {hold|wear|wield}%*}
{
	show stats | prefix silent_;
	show clev | prefix silent_
}
{9}

#ACTION {^Your {charisma|constitution|dexterity|intelligence|strength|wisdom} increases%*}
{
	show stats | prefix silent_;
	autobrag %0
}
{9}

#ACTION {^junk_You drop %*.$}
{
	sac $junkItem #unvariable {junkItem}
}
{9}

#ACTION {^junk_You insult %1 %S.$}
{
	drop %2 | prefix junk_;
	#variable {junkItem} {%2}
}
{9}

#ACTION {^scrollcounter_(%s%d)%*}
{
	#if {%2 != 1}
	{
		#variable {msg} {%2 ${battleScroll}s remaining.}
	};
	#else
	{
		#variable {msg} {%2 ${battleScroll} remaining.}
	};
	Add_Event $msg;
	#showme {$msg};
	#unvariable {result}
}
{9}

#ACTION {^silent_%*$battleScroll}
{
	get $battleScroll corpse;
	put $battleScroll ${character.container}
}
{9}

#ACTION {^silent_Improving '%1' requires %d points.$}
{
	#variable {autocp[1]} {%1};
	#variable {autocp[2]} {%2};
	#showme {You are spending %2 combat points automatically to improve %1.}
}
{9}

#ACTION {^silent_No spell or skill by that name found.$}
{
	#showme {^No spell or skill by that name found. Autocp not changed.}
}
{9}

#ACTION {^silent_You currently gain %1 hitpoints, %2 mana, and %3 movement while {standing|sleeping|sitting}.$}
{
	#math {character.hpRegenTime} {(${character.maxHp} - ${character.currentHp}) / %1};
	#math {character.mnRegenTime} {(${character.maxMana} - ${character.currentMana}) / %2};
	#math {character.mvRegenTime} {(${character.maxMv} - ${character.currentMv}) / %3};
	#delay {0.1} {#variable {character.regenTime} {${character.hpRegenTime}};#if {${character.mnRegenTime} > ${character.regenTime}}{#variable {character.regenTime} {${character.mnRegenTime}}}; #if {${character.mvRegenTime} > ${character.regenTime}}{#variable {character.regenTime} {${character.mvRegenTime}}};#if {${character.regenTime} > 0}{#showme {Approximately ${character.regenTime} ticks until regeneration is complete.}}}
}
{9}

#ACTION {^silent_You have %1/%2 str, %3/%4 int, %5/%6 wis, %7/%8 dex, %9/%10 con, and %11/%12 chr.$}
{
	#if {!&{character.strBonus}}
	{
			#variable {character.strBonus} {0}
	};
	#if {!&{character.intBonus}}
	{
			#variable {character.intBonus} {0}
	};
	#if {!&{character.wisBonus}}
	{
			#variable {character.wisBonus} {0}
	};
	#if {!&{character.dexBonus}}
	{
			#variable {character.dexBonus} {0}
	};
	#if {!&{character.conBonus}}
	{
			#variable {character.conBonus} {0}
	};
	#if {!&{character.chrBonus}}
	{
			#variable {character.chrBonus} {0}
	};
	#if {${character.strBonus} != %1}
	{
			#showme {You now have %1 of %2 strength.}
	};
	#if {${character.intBonus} != %3}
	{
		#showme {You now have %3 of %4 intelligence.}
	};
	#if {${character.wisBonus} != %5}
	{
		#showme {You now have %5 of %6 wisdom.}
	};
	#if {${character.dexBonus} != %7}
	{
			#showme {You now have %7 of %8 dexterity.}
	};
	#if {${character.conBonus} != %9}
	{
		#showme {You now have %9 of %10 constitution.}
	};
	#if {${character.chrBonus} != %11}
	{
		#showme {You now have %11 of %12 charisma.}
	};
	#variable {character.strBonus} {%1};
	#variable {character.str} {%2};
	#variable {character.intBonus} {%3};
	#variable {character.int} {%4};
	#variable {character.wisBonus} {%5};
	#variable {character.wis} {%6};
	#variable {character.dexBonus} {%7};
	#variable {character.dex} {%8};
	#variable {character.conBonus} {%9};
	#variable {character.con} {%10};
	#variable {character.chrBonus} {%11};
	#variable {character.chr} {%12}
}
{9}

#ACTION {^silent_You {become|learn}%2}
{
	#showme {You %1%2}
}
{9}

#ACTION {^silent_Your name is %S, and your fight string is %2.$}
{
	#showme {kxwt_myname %1}
}
{9}

#ACTION {^silent_brag_%wYou have died %d times to mobs.$}
{
	%1 I have died %2 times to mobs.
}
{9}

#ACTION {^{silent_You|You} can train to get a practice, at a cost of %d experience each.$}
{
	#variable {auto.buyPracticeExperience} {%2}
}
{9}

#ALIAS {^{rest|si|sit}$}
{
	#variable {position} {rest};
	#send {rest};
	show regen | prefix silent_
}
{A 9}

#ALIAS {^{f|fl|fle|flee}$}
{
	run
}
{1}

#ALIAS {^autostore %S}
{
	#variable {character.soulstoneContainer} {%1};
	#variable {auto.store} {true};
	#showme {You will now put soulstones in your ${character.soulstoneContainer}\.}
}
{8}

#ALIAS {^hands %1}
{
	#if {"${skillsAndSpells.burning hands}" == "true"}
	{
		c burning hands %1
	};
	#if {"${skillsAndSpells.clasp of corruption}" == "true"}
	{
		c clasp of corruption %1
	};
	#if {"${skillsAndSpells.shocking grasp}" == "true"}
	{
		c shocking grasp %1
	};
	#if {"${skillsAndSpells.sacred touch}" == "true"}
	{
		c sacred touch %1
	};
	#if {"${skillsAndSpells.sickening touch}" == "true"}
	{
		c sickening touch %1
	}
}
{8}

#ALIAS {^%ddo %2}
{
	#regexp {%2} {{.*} {.*}} {#loop {1} {%1} {i} {&1 $i\.&2}};
	#else
	{
		#loop {1} {%1} {i}
		{
			$i\.%2
		}
	}
}
{9}

#ALIAS {^:q!$}
{
	#nop {quit without saving};
	#send {quit};
	#delay {1.5} {#end}
}
{9}

#ALIAS {^:wq$}
{
	#nop {Save and quit};
	quit;
	#delay {1.5} {#end}
}
{9}

#ALIAS {^autobuypractice$}
{
	#showme {You will now automatically spend experience to buy practices.};
	train | grep -i You can train to get a practice | prefix silent_;
	#variable {auto.buypractice} {true}
}
{9}

#ALIAS {^autocp %1}
{
	points value %1 | prefix silent_
}
{9}

#ALIAS {^autogamble %S}
{
	#if {"%1" == "{merchant|slots}"}
	{
		#variable {auto.gamble} {%1};
		#showme {You will now automatically spend gambling gold on the %1 game. Good luck!}
	};
	#else
	{
		#showme {Invalid game type chosen. Choices are merchant or slots.}
	}
}
{9}

#ALIAS {^autogamble$}
{
	#if {&{auto.gamble}}
	{
		#showme {You are betting your gold on the ${auto.gamble} game automatically.}
	};
	#else
	{
		#showme {You are not currently automatically gambling with gambling gold. To start type autogamble gametype where gametype is either merchant or slots.}
	}
}
{9}

#ALIAS {^autostore$}
{
	#if {!&{character.soulstoneContainer}}
	{
		#variable {character.soulstoneContainer} {${character.container}}
	};
	#variable {auto.store} {true};
	#showme {You will now put soulstones in your ${character.soulstoneContainer}\.}
}
{9}

#ALIAS {^autothank$}
{
	#variable {auto.thank} {true};
	#showme {You will now thank people for newbie gifts automatically.}
}
{9}

#ALIAS {^cont{a|ai|ain|aine|ainer} %S$}
{
	#showme {Container set to %2.};
	#variable {character.container} {%2}
}
{9}

#ALIAS {^getup$}
{
	\stand
}
{9}

#ALIAS {^hands$}
{
	#if {"${skillsAndSpells.burning hands}" == "true"}
	{
		c burning hands
	};
	#if {"${skillsAndSpells.clasp of corruption}" == "true"}
	{
		c clasp of corruption
	};
	#if {"${skillsAndSpells.shocking grasp}" == "true"}
	{
		c shocking grasp
	};
	#if {"${skillsAndSpells.sacred touch}" == "true"}
	{
		c sacred touch
	};
	#if {"${skillsAndSpells.sickening touch}" == "true"}
	{
		c sickening touch
	}
}
{9}

#ALIAS {^noautobuypractice$}
{
	#showme {You will no longer automatically buy practices.};
	#unvariable {auto.buypractice}
}
{9}

#ALIAS {^noautogamble$}
{
	#unvariable {auto.gamble};
	#showme {automatic gambling gold gambling disabled.}
}
{9}

#ALIAS {^noautoregen$}
{
	#unvariable {autoregen};
	#showme {You will no longer automatically regen when your group leader does.}
}
{9}

#ALIAS {^noautothank$}
{
	#unvariable {auto.thank};
	#showme {You will no longer thank people for newbie gifts automatically.}
}
{9}

#ALIAS {^nopfile$}
{
	#unvariable {personalFile};
	#class {personal} {kill};
	#showme {personal file variable cleared.}
}
{9}

#ALIAS {^nopkmode$}
{
	#unvariable {pkMode};
	#showme {PK mode disabled.}
}
{9}

#ALIAS {^of{f|fs|fse|fset|fsets}$}
{
	who -level | grep Gold offset:;
	graph 2 | head -n 7 | tail -n 2 | prefix silent_Good;
	graph 3 | head -n 7 | tail -n 2 | prefix silent_Evil
}
{9}

#ALIAS {^pfile %1}
{
	#variable {personalFile} {%1};
	#class {personal} {read} {$personalFile};
	#showme {loading $personalFile}
}
{9}

#ALIAS {^pkmode$}
{
	#variable {pkMode} {true};
	#showme {PK mode activated.}
}
{9}

#ALIAS {^track %1}
{
	#variable {tracking} {%1};
	#showme {You are now tracking.}
}
{9}

#ALIAS {^notrack$}
{
	#unvariable {tracking};
	#showme {You are no longer tracking.}
}
{9}

#ALIAS {^x$}
{
	insult corpse | prefix silent_
}
{9}

#ALIAS {^yes$}
{
	#if {"$yes" != "false"}
	{
		$yes;
		#variable {yes} {false}
	};
	#else
	{
		#showme {There is currently nothing in the prompt queue.}
	}
}
{9}

#ALIAS {^{auto|noauto}cp$}
{
	#if {"%0" == "autocp"}
	{
		#if {&{autocp}}
		{
			#showme {You are spending ${autocp[2]} combat points automatically to improve ${autocp[1]}\.}
		};
		#else
		{
			#showme {Autocp is not set.}
		}
	};
	#else
	{
		#unvariable {autocp};
		#showme {Autocp cleared.}
	}
}
{9}

#ALIAS {^{auto|noauto}{donate|get}unique$}
{
	#switch {"%0"}
	{
		#case {"autogetunique"}
		{
			#variable {auto.getunique} {true};
			#variable {auto.donateunique} {false};
			#showme {You will automatically loot unique items from corpses.}
		};
		#case {"autodonateunique"}
		{
			#variable {auto.donateunique} {true};
			#variable {auto.getunique} {true};
			#showme {You will automatically loot unique items from corpses and then donate them.}
		};
		#default
		{
			#variable {auto.getunique} {false};
			#variable {auto.donateunique} {false};
			#showme {You will no longer automatically loot unique items from corpses.}
		}
	}
}
{9}

#ALIAS {^{bra|brag|sh|sho|show} {md|mde|mdea|mdeat|mdeath}$}
{
	whoami | grep times to mobs.
}
{9}

#ALIAS {^{bra|brag} %s%w %s{md|mde|mdea|mdeat|mdeath}$}
{
	whoami | grep times to mobs. | prefix silent_brag_%3
}
{9}

#ALIAS {^{clock|noclock}$}
{
	#if {"%0" == "clock"}
	{
		#variable {clock} {true};
		#showme {Hourly chimes enabled.}
	};
	#else
	{
		#unvariable {clock};
		#showme {Hourly chimes disabled.}
	}
}
{9}

#ALIAS {^{cp|combatpoints}$}
{
	points | grep available to spend.
}
{9}

#ALIAS {^{c|qc}save$}
{
	#unvariable {play_%*};
	#class {gameData} {write} {$gameDataPath};
	#if {"%0" == "csave"}
	{
		#showme {saving game data for $name\.}
	}
}
{9}

#ALIAS {^{fam|fame}$}
{
	show fame
}
{9}

#ALIAS {^{g|ge|get|gi|giv|give|p|pu|put} %2 %S$}
{
	#if {!&{character.container} && "%1" == "{p|pu|put}"}
	{
		#variable {character.container} {%3}
	};
	#variable {i} {%2};
	#replace {i} {,} {;};
	#forall {$i} {#send {%1 &0 %3}}
}
{9}

#ALIAS {^{loa|load}$}
{
	spells;
	#cr;
	#cr;
	#cr;
	#cr;
	whoami | grep -i tall.;
	skills;
	#cr;
	#cr;
	#cr;
	#cr;
	#cr;
	show stats | prefix silent_;
	show clev | prefix silent_;
	#delay {3} {qcsave}
}
{9}

#ALIAS {^{mi|min|mini|minio|minion|minions}$}
{
	#send {minions};
	control | grep -i remaining | prefix silent_
}
{9}

#ALIAS {^{noaudio|audio}tick$}
{
	#if {"%0" == "audiotick"}
	{
		#variable {audioTick} {true};
		#showme {Tick markers will now be audio only.}
	};
	#else
	{
		#unvariable {audioTick};
		#showme {Tick markers will now be displayed normally.}
	}
}
{9}

#ALIAS {^{noscro|noscrol|noscroll}$}
{
	#unvariable {battleScroll};
	#showme {Battle scroll cleared.}
}
{9}

#ALIAS {^{pracs|practices}$}
{
	show practices
}
{9}

#ALIAS {^{scro|scrol|scroll} %1}
{
	#variable {battleScroll} {%1};
	#showme {You can now use alt+backslash to use get the %1 from your container and use it.}
}
{9}

#ALIAS {^{scro|scrol|scroll}$}
{
	#if {!&{battleScroll}}
	{
		#showme {You don't have a battle scroll set. To set it type scroll and the item you want to use, E.g. scroll potion.}
	};
	#else
	{
		#regexp {$battleScroll} {{.*} {.*}} {l in ${character.container} &2 | prefix scrollcounter_};
		#else
		{
			l in ${character.container} $battleScroll | prefix scrollcounter_
		}
	}
}
{9}

#ALIAS {^{sl|sle|slee|sleep}$}
{
	#variable {position} {sleep};
	#send {sleep};
	show regen | prefix silent_
}
{9}

#ALIAS {^{wa|wak|wake|stan|stand}$}
{
	#unvariable {position};
	#send {%0}
}
{9}

#ALIAS {autorefresh}
{
	#variable {auto.refresh} {true};
	#showme {You will automaticaly cast refresh spells if your MV is low.}
}
{9}

#ALIAS {cconf %1}
{
	#if {!&{%1}}
	{
		#showme {%1 false}
	};
	#else
	{
		#showme {%1 $%1}
	}
}
{9}

#ALIAS {g}
{
	#send {get all corpse}
}
{9}

#ALIAS {junk %1}
{
	insult ?%1 -inventory | prefix junk_
}
{9}

#ALIAS {lic}
{
	look in corpse
}
{9}

#ALIAS {noautorefresh}
{
	#variable {auto.refresh} {false};
	#showme {You will no longer automaticaly cast refresh spells.}
}
{9}

#ALIAS {noautostore}
{
	#unvariable {auto.store};
	#showme {You will no longer autostore anything.}
}
{9}

#ALIAS {repeat %1}
{
	replay | grep -i %1
}
{9}

#ALIAS {rm}
{
	remove
}
{9}

#ALIAS {skill %1}
{
	skills | grep -i %1
}
{9}

#FUNCTION {command}
{
	#script {result} {bash scripts/rndcmd.sh "%1" "%2"};
	#variable {result} {${result[1]}}
}

#GAG              {^You don't see anything named 'coins' in the corpse of %1.$}
#GAG              {^junk_You insult%*}
#GAG              {^scrollcounter_%*}
#GAG              {^silent_%*}
#MACRO {\e/}
{
	#showme {Buffer lock toggled.};
	#buffer {lock}
}

#MACRO {\e\}
{
	#regexp {$battleScroll} {{.*} {.*}} {get $battleScroll ${character.container};use &2;l in ${character.container} &2 | prefix scrollcounter_};
	#else
	{
		get $battleScroll ${character.container};
		use $battleScroll;
		l in ${character.container} $battleScroll | prefix scrollcounter_
	}
}

#SUBSTITUTE       {MOV_REGEN}  {MOVE_REGEN}  {5}
#SUBSTITUTE       {^%sjunk_%2}  { %2}  {5}
#SUBSTITUTE       {^junk_%1}  {%1}  {5}
#SUBSTITUTE       {tracking_[%1] }  {}  {5}
#TICKER           {historyWriter}  {#if {&{name}} {#history {write} {$historyPath}}}                                                          {5.00}
#VARIABLE         {bufferLock}  {off}
#VARIABLE         {castTankMinion}  {true}
#VARIABLE         {lastHpAlert}  {}
#VARIABLE         {lostExp}  {}
#VARIABLE         {msg}  {}
#VARIABLE         {playerSex}  {}
#VARIABLE         {yes}  {#send {yes}}
